/*
 * Copyright 2018 Comcast Cable Communications Management, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package timeseries

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TimeRangeQuery) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "statement":
			z.Statement, err = dc.ReadString()
			if err != nil {
				return
			}
		case "extent":
			err = z.Extent.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "step":
			z.StepNS, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "bft":
			z.BackfillToleranceNS, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "tsdef":
			err = z.TimestampDefinition.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TimeRangeQuery) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "statement"
	err = en.Append(0x85, 0xa9, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Statement)
	if err != nil {
		return
	}
	// write "extent"
	err = en.Append(0xa6, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Extent.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "step"
	err = en.Append(0xa4, 0x73, 0x74, 0x65, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StepNS)
	if err != nil {
		return
	}
	// write "bft"
	err = en.Append(0xa3, 0x62, 0x66, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BackfillToleranceNS)
	if err != nil {
		return
	}
	// write "tsdef"
	err = en.Append(0xa5, 0x74, 0x73, 0x64, 0x65, 0x66)
	if err != nil {
		return
	}
	err = z.TimestampDefinition.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TimeRangeQuery) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "statement"
	o = append(o, 0x85, 0xa9, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Statement)
	// string "extent"
	o = append(o, 0xa6, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74)
	o, err = z.Extent.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "step"
	o = append(o, 0xa4, 0x73, 0x74, 0x65, 0x70)
	o = msgp.AppendInt64(o, z.StepNS)
	// string "bft"
	o = append(o, 0xa3, 0x62, 0x66, 0x74)
	o = msgp.AppendInt64(o, z.BackfillToleranceNS)
	// string "tsdef"
	o = append(o, 0xa5, 0x74, 0x73, 0x64, 0x65, 0x66)
	o, err = z.TimestampDefinition.MarshalMsg(o)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TimeRangeQuery) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "statement":
			z.Statement, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "extent":
			bts, err = z.Extent.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "step":
			z.StepNS, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "bft":
			z.BackfillToleranceNS, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "tsdef":
			bts, err = z.TimestampDefinition.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TimeRangeQuery) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.Statement) + 7 + z.Extent.Msgsize() + 5 + msgp.Int64Size + 4 + msgp.Int64Size + 6 + z.TimestampDefinition.Msgsize()
	return
}
