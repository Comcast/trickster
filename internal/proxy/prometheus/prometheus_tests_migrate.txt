/**
* Copyright 2018 Comcast Cable Communications Management, LLC
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

package prometheus

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"reflect"
	"strconv"
	"testing"

	"github.com/go-kit/kit/log"
	"github.com/prometheus/common/model"
)

func newTestTricksterHandler(t *testing.T) (tr *TricksterHandler, close func(t *testing.T)) {
	conf := NewConfig()

	conf.Origins["default"] = PrometheusOriginConfig{
		OriginURL:           nonexistantOrigin,
		APIPath:             prometheusAPIv1Path,
		IgnoreNoCacheHeader: true,
		MaxValueAgeSecs:     86400,
	}
	tr = &TricksterHandler{
		ResponseChannels: make(map[string]chan *ClientRequestContext),
		Config:           conf,
		Logger:           log.NewNopLogger(),
		Metrics:          NewApplicationMetrics(),
	}

	tr.Cacher = getCache(tr)
	if err := tr.Cacher.Connect(); err != nil {
		t.Fatal("Unable to connect to cache:", err)
	}

	return tr, func(t *testing.T) {
		tr.Metrics.Unregister()
		if err := tr.Cacher.Close(); err != nil {
			t.Fatal("Error closing cacher:", err)
		}
	}
}

func (t *TricksterHandler) setTestOrigin(originURL string) {
	conf := NewConfig()
	conf.Origins["default"] = PrometheusOriginConfig{
		OriginURL:           originURL,
		APIPath:             prometheusAPIv1Path,
		IgnoreNoCacheHeader: true,
		MaxValueAgeSecs:     86400,
	}
	t.Config = conf
}

func TestUnreachableOriginReturnsStatusBadGateway(t *testing.T) {
	tests := []struct {
		handler func(*TricksterHandler, http.ResponseWriter, *http.Request)
		path    string
	}{
		{
			handler: (*TricksterHandler).promHealthCheckHandler,
		},
		{
			handler: (*TricksterHandler).promFullProxyHandler,
		},
		{
			handler: (*TricksterHandler).promQueryHandler,
		},
		{
			handler: (*TricksterHandler).promQueryRangeHandler,
			path:    prometheusAPIv1Path + "query_range?start=100000000&end=200000000&step=15&query=up",
		},
	}

	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)

	for _, test := range tests {
		rr := httptest.NewRecorder()
		test.handler(tr, rr, httptest.NewRequest("GET", "http://trickster"+test.path, nil))
		if rr.Result().StatusCode != http.StatusBadGateway {
			t.Errorf("unexpected status code; want %d, got %d", http.StatusBadGateway, rr.Result().StatusCode)
		}
	}
}

func TestMissingRangeQueryParametersResultInStatusBadRequest(t *testing.T) {
	paramsTests := []string{
		"start=0&end=100000000&query=up",
		"end=100000000&step=15&query=up",
		"start=0&step=15&query=up",
	}

	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)

	for _, params := range paramsTests {
		rr := httptest.NewRecorder()
		tr.promQueryRangeHandler(rr, httptest.NewRequest("GET", "http://trickster"+prometheusAPIv1Path+"query_range?"+params, nil))
		if rr.Result().StatusCode != http.StatusBadRequest {
			t.Errorf("unexpected status code for params %q; want %d, got %d", params, http.StatusBadRequest, rr.Result().StatusCode)
		}
	}
}

func newTestServer(body string) *httptest.Server {
	handler := func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprint(w, body)
	}
	s := httptest.NewServer(http.HandlerFunc(handler))
	return s
}

func TestTricksterHandler_pingHandler(t *testing.T) {
	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)
	es := newTestServer("{}")
	defer es.Close()
	tr.setTestOrigin(es.URL)

	w := httptest.NewRecorder()
	r := httptest.NewRequest("GET", es.URL, nil)
	tr.pingHandler(w, r)

	resp := w.Result()

	// it should return 200 OK
	if resp.StatusCode != 200 {
		t.Errorf("wanted 200 got %d.", resp.StatusCode)
	}

	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Error(err)
	}

	if string(bodyBytes) != "pong" {
		t.Errorf("wanted 'pong' got %s.", bodyBytes)
	}

}

func TestTricksterHandler_promHealthCheckHandler(t *testing.T) {
	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)
	es := newTestServer("{}")
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should proxy request
	w := httptest.NewRecorder()
	r := httptest.NewRequest("GET", es.URL, nil)
	tr.promHealthCheckHandler(w, r)

	if w.Result().StatusCode != 200 {
		t.Errorf("wanted 200 got %d.", w.Result().StatusCode)
	}
}

func TestTricksterHandler_promFullProxyHandler(t *testing.T) {
	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)
	es := newTestServer("{}")
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should proxy request
	w := httptest.NewRecorder()
	r := httptest.NewRequest("GET", es.URL, nil)
	tr.promFullProxyHandler(w, r)

	if w.Result().StatusCode != 200 {
		t.Errorf("wanted 200 got %d.", w.Result().StatusCode)
	}
}

func TestTricksterHandler_promQueryHandler(t *testing.T) {
	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)
	es := newTestServer("{}")
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should proxy request
	w := httptest.NewRecorder()
	r := httptest.NewRequest("GET", es.URL, nil)
	tr.promQueryHandler(w, r)

	if w.Result().StatusCode != 200 {
		t.Errorf("wanted 200 got %d.", w.Result().StatusCode)
	}
}

func TestTricksterHandler_promQueryRangeHandler_cacheMiss(t *testing.T) {
	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)
	es := newTestServer(exampleRangeResponse)
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should queue the proxy request
	w := httptest.NewRecorder()
	r := httptest.NewRequest("GET", es.URL+exampleRangeQuery, nil)
	tr.promQueryRangeHandler(w, r)

	if w.Result().StatusCode != 200 {
		t.Errorf("wanted 200 got %d.", w.Result().StatusCode)
	}
}

func TestTricksterHandler_promQueryRangeHandler_cacheHit(t *testing.T) {
	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)
	es := newTestServer(exampleRangeResponse)
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// setup cache
	r := httptest.NewRequest("GET", es.URL+exampleRangeQuery, nil)
	tr.fetchPromQuery(es.URL+prometheusAPIv1Path+exampleRangeQuery_step, r.URL.Query(), r)

	// it should respond from cache
	w := httptest.NewRecorder()
	r = httptest.NewRequest("GET", es.URL+exampleRangeQuery, nil)
	tr.promQueryRangeHandler(w, r)

	resp := w.Result()
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		t.Errorf("wanted 200. got %d.", resp.StatusCode)
	}

	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		t.Error(err)
	}

	fmt.Println(string(bodyBytes))

	pm := PrometheusMatrixEnvelope{}
	err = json.Unmarshal(bodyBytes, &pm)
	if err != nil {
		t.Error(err)
	}

	if pm.getValueCount() != 6 {
		t.Errorf("wanted 6 got %d.", pm.getValueCount())
	}
}

func TestTricksterHandler_getURL(t *testing.T) {
	tr, closeFn := newTestTricksterHandler(t)
	defer closeFn(t)
	body := "{}"
	es := newTestServer(body)
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should get from the echo server
	b, _, _, err := tr.getURL(tr.Config.Origins["default"], "GET", es.URL, url.Values{}, nil)
	if err != nil {
		t.Error(err)
	}
	if bytes.Compare(b, []byte(body)) != 0 {
		t.Errorf("wanted \"%s\" got \"%s\"", body, b)
	}
}

func TestTricksterHandler_getVectorFromPrometheus(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)
	es := newTestServer(exampleResponse)
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should get an empty vector envelope
	r := httptest.NewRequest("GET", es.URL+exampleQuery, nil)
	pe, _, _, err := tr.getVectorFromPrometheus(es.URL, r.URL.Query(), r)
	if err != nil {
		t.Error(err)
	}
	if pe.Status != "success" {
		t.Errorf("wanted \"success\" got \"%s\".", pe.Status)
	}
}

func TestTricksterHandler_getMatrixFromPrometheus(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)
	es := newTestServer(exampleRangeResponse)
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should get an empty matrix envelope
	r := httptest.NewRequest("GET", es.URL+exampleRangeQuery, nil)
	pe, _, _, _, err := tr.getMatrixFromPrometheus(es.URL, r.URL.Query(), r)
	if err != nil {
		t.Error(err)
	}
	if pe.Status != "success" {
		t.Errorf("wanted \"success\" got \"%s\".", pe.Status)
	}
}


func TestTricksterHandler_respondToCacheHit(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)

	w := httptest.NewRecorder()
	r := httptest.NewRequest("GET", nonexistantOrigin+exampleRangeQuery, nil)
	ctx, err := tr.buildRequestContext(w, r)
	if err != nil {
		t.Error(err)
	}

	// it should update the response in ctx.Writer without failing
	ctx.WaitGroup.Add(1)
	tr.respondToCacheHit(ctx)
}


func TestTricksterHandler_mergeVector(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)

	pm := PrometheusMatrixEnvelope{}
	err := json.Unmarshal([]byte(exampleRangeResponse), &pm)
	if err != nil {
		t.Error(err)
	}

	pv := PrometheusVectorEnvelope{}
	err = json.Unmarshal([]byte(exampleResponse), &pv)
	if err != nil {
		t.Error(err)
	}

	// it should merge the values from the vector into the matrix
	pe := tr.mergeVector(pm, pv)

	if 8 != pe.getValueCount() {
		t.Errorf("wanted 8 got %d.", pe.getValueCount())
	}
}

func TestTricksterHandler_mergeVector(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)

	pm := PrometheusMatrixEnvelope{}
	err := json.Unmarshal([]byte(exampleRangeResponse), &pm)
	if err != nil {
		t.Error(err)
	}

	pv := PrometheusVectorEnvelope{}
	err = json.Unmarshal([]byte(exampleResponse), &pv)
	if err != nil {
		t.Error(err)
	}

	// it should merge the values from the vector into the matrix
	pe := tr.mergeVector(pm, pv)

	if 8 != pe.getValueCount() {
		t.Errorf("wanted 8 got %d.", pe.getValueCount())
	}
}
