func TestTricksterHandler_getVectorFromPrometheus(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)
	es := newTestServer(exampleResponse)
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should get an empty vector envelope
	r := httptest.NewRequest("GET", es.URL+exampleQuery, nil)
	pe, _, _, err := tr.getVectorFromPrometheus(es.URL, r.URL.Query(), r)
	if err != nil {
		t.Error(err)
	}
	if pe.Status != "success" {
		t.Errorf("wanted \"success\" got \"%s\".", pe.Status)
	}
}

func TestTricksterHandler_getMatrixFromPrometheus(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)
	es := newTestServer(exampleRangeResponse)
	defer es.Close()
	tr.setTestOrigin(es.URL)

	// it should get an empty matrix envelope
	r := httptest.NewRequest("GET", es.URL+exampleRangeQuery, nil)
	pe, _, _, _, err := tr.getMatrixFromPrometheus(es.URL, r.URL.Query(), r)
	if err != nil {
		t.Error(err)
	}
	if pe.Status != "success" {
		t.Errorf("wanted \"success\" got \"%s\".", pe.Status)
	}
}

func TestTricksterHandler_mergeVector(t *testing.T) {
	tr, closeTr := newTestTricksterHandler(t)
	defer closeTr(t)

	pm := PrometheusMatrixEnvelope{}
	err := json.Unmarshal([]byte(exampleRangeResponse), &pm)
	if err != nil {
		t.Error(err)
	}

	pv := PrometheusVectorEnvelope{}
	err = json.Unmarshal([]byte(exampleResponse), &pv)
	if err != nil {
		t.Error(err)
	}

	// it should merge the values from the vector into the matrix
	pe := tr.mergeVector(pm, pv)

	if 8 != pe.getValueCount() {
		t.Errorf("wanted 8 got %d.", pe.getValueCount())
	}
}
