# Default values for trickster.

# Put ints in quotes to ensure they aren't converted to scientific notations.
# See https://github.com/kubernetes/helm/issues/1707
caches:
  - name: default
    # type defines what kind of cache Trickster uses
    # options are 'bbolt', 'badger', 'filesystem', 'memory', and 'redis'
    type: memory

    # compression determines whether the cache should be compressed. default is true
    # changing the compression setting will leave orphans in your cache for the duration of timeseries_ttl_secs
    compression: true

    # timeSeriesTTLSecs defines the relative expiration of cached timeseries. default is 6 hours (21600 seconds)
    timeSeriesTTLSecs: "21600"

    # fastforwardTTLSecs defines the relative expiration of cached fast forward data. default is 15s
    fastforwardTTLSecs: "15"

    # objectTTLSecs defines the relative expiration of generically cached (non-timeseries) objects. default is 30s
    objectTTLSecs: "30"

    ### Configuration options for the Cache Index
    # The Cache Index handles key management and retention for bbolt, filesystem and memory
    # Redis and BadgerDB handle those functions natively and does not use the Trickster's Cache Index
    index:

      # reapIntervalSecs defines how long the Cache Index reaper sleeps between reap cycles. Default is 3 (3s)
      reapIntervalSecs: "3"

      # flushIntervalSecs sets how often the Cache Index saves its metadata to the cache from application memory. Default is 5 (5s)
      flushIntervalSecs: "5"

      # maxSizeBytes indicates how large the cache can grow in bytes before the Index evicts least-recently-accessed items. default is 512MB
      maxSizeBytes: "536870912"
      
      # maxSizeBackoffBytes indicates how far below max_size_bytes the cache size must be to complete a byte-size-based eviction exercise. default is 16MB
      maxSizeBackoffBytes: "16777216"

      # maxSizeObjects indicates how large the cache can grow in objects before the Index evicts least-recently-accessed items. default is 0 (infinite)
      maxSizeObjects: "0"

      # maxSizeBackoffObjects indicates how far under maxSizeObjects the cache size must be to complete object-size-based eviction exercise. default is 100
      maxSizeBackoffObjects: "100"

    ### Configuration options when using a Redis Cache
    redis:
      # clientType indicates which kind of Redis client to use. Options are: 'standard', 'cluster' and 'sentinel'
      clientType: standard

      # Supported by Redis (standard)
      # These configurations are ignored by Redis Sentinel and Redis Cluster
      # protocol defines the protocol for connecting to redis ('unix' or 'tcp') 'tcp' is default
      protocol: tcp

      # endpoint defines the fqdn+port or path to a unix socket file for connecting to redis
      endpoint: redis:6379

      # Supported by Redis Cluster and Redis Sentinel
      # These conigurations are ignored by Redis (standard)
      # endpoints is used for Redis Cluster and Redis Sentinel to define a list of endpoints
      #endpoints: ['redis:6379']

      # password provides the redis password
      password: ''

      # Supported by Redis Sentinel
      # These conigurations are ignored by Redis (standard) and Redis Cluster
      # sentinelMaster should be set when using Redis Sentinel to indicate the Master Node
      #sentinelMaster: ''

      # db is the Database to be selected after connecting to the server.
      #db: "0"

      # maxRetries is the maximum number of retries before giving up on the command
      #maxRetries: "0"

      # minRetryBackoffMs is the minimum backoff time between each retry
      #minRetryBackoffMs: "8"

      # maxRetyBackoffMs is the maximum backoff time between each retry
      #maxRetyBackoffMs: "512"

      # dialTimeoutMs is the timeout for establishing new connections
      #dialTimeoutMs: "5000"

      # readTimeoutMs is the timeout for socket reads. If reached, commands will fail with a timeout instead of blocking.
      #readTimeoutMs: "3000"

      # writeTimeoutMs is the timeout for socket writes. If reached, commands will fail with a timeout instead of blocking.
      #writeTimeoutMs: "3000"

      # poolSize is the maximum number of socket connections.
      #poolSize: "20"

      # minIdleConns is the minimum number of idle connections which is useful when establishing new connection is slow.
      #minIdleConns: "0"

      # maxConnAgeMs is the connection age at which client retires (closes) the connection.
      #maxConnAgeMs: "0"

      # poolTimeoutMs is the amount of time client waits for connection if all connections are busy before returning an error.
      #poolTimeoutMs: "4000"

      # idleTimeoutMs is the amount of time after which client closes idle connections.
      #idleTimeoutMs: "300000"

      # idleCheckFrequencyMs is the frequency of idle checks made by idle connections reaper.
      #idleCheckFrequencyMs: "60000"

    ### Configuration options when using a Filesystem Cache
    filesystem:
      # path defines the directory location under which the Trickster cache will be maintained
      path: /tmp/trickster

    ### Configuration options when using a bbolt Cache
    bbolt:
      # file defines the file where the Trickster cache will be maintained
      file: trickster.db

      # bucket defines the name of the BotlDb bucket (similar to a namespace) under which our key value store lives
      bucket: trickster

    ### Configuration options when using a Badger cache
    badger:
      # directory defines the directory location under which the Badger data will be maintained
      directory: /tmp/trickster

      # valueDirectory defines the directory location under which the Badger value log will be maintained
      valueDirectory: /tmp/trickster

# Configuration options for mapping Origin(s)
origins:
  # example origin named default. default is always created with these settings unless a different origin is defined here.
  - name: default
    # isDefault describes whether this origin is the default origin considered when routing http requests
    # it is false, by default; but if you only have a single origin configured, isDefault will be true unless explicitly set to false
    isDefault: true

    # type identifies the origin type. Valid options are 'prometheus', 'influxdb', 'irondb'
    type: prometheus

    # scheme identifies the scheme
    scheme: http

    # host identifies the upstream origin by fqdn/IP and port
    host: 'prometheus:9090'

    # pathPrefix provides any path that is prefixed onto the front of the client's requested path
    pathPrefix: ''

    # timeoutSecs defines how many seconds Trickster will wait before aborting and upstream http request.
    timeoutSecs: "180"

    # keepAliveTimeoutSecs defines how long Trickster will wait before closing a keep-alive connection due to inactivity
    # if the origin's keep-alive timeout is shorter than Trickster's, the connect will be closed sooner.
    keepAliveTimeoutSecs: "300"

    # maxIdleConns set the maximum concurrent keep-alive connections Trickster may have opened to this origin
    # additional requests will be queued.
    maxIdleConns: "20"

    # apiPath defines the path of the Upstream Origin's API (usually '/api/v1')
    apiPath: /api/v1

    # ignoreNoCacheHeader disables a client's ability to send a no-cache to refresh a cached query.
    ignoreNoCacheHeader: false

    # timeseriesRetentionFactor defines the maximum number of recent timestamps to cache for a given query.
    timeseriesRetentionFactor: "1024"

    # timeseriesEvictionMethod selects the metholodogy used to determine which timestamps are removed once
    # the timeseriesEvictionMethod limit is reached. options are 'oldest' and 'lru'.
    timeseriesEvictionMethod: "oldest"

    # fastForwardDisable, when set to true, will turn off the 'fast forward' feature for any requests proxied to this origin
    fastForwardDisable: false

    # backfillToleranceSecs prevents new datapoints that fall within the tolerance window (relative to time.Now) from being cached
    # Think of it as "never cache the newest N seconds of real-time data, because it may be preliminary and subject to updates"
    backfillToleranceSecs: "0"

    # For multi-origin support, origins are named, and the name is the second word of the configuration section name.
    # In this example, an origin is named "foo".
    # Clients can indicate this origin in their path (http://trickster.example.com:9090/foo/api/v1/query_range?.....)
    # there are other ways for clients to indicate which origin to use in a multi-origin setup. See the documentation for more information

logLevel: info
# logFile: /some/path/to/trickster.log
profiler:
  enabled: false
  port: 6060

# Number of trickster replicas desired
replicaCount: 1

# image for trickster deplyoment
image:
  repository: tricksterio/trickster
  tag: 1.0-beta
  pullPolicy: IfNotPresent

# Service resource for trickster deplyoment
# Ref: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  port: 9090
  # nodePort: 0
  metricsPort: 8080
  # metricsNodePort: 0

# Ingress resource for trickster service
# Ref : https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Resource limits & requests
# Ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

# Tolerations for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# Affinity for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
